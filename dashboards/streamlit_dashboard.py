import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import os

# Set page config
st.set_page_config(
    page_title="Transparencia - Carmen de Areco",
    page_icon="üìä",
    layout="wide"
)

st.title("üìä Portal de Transparencia - Carmen de Areco")

# Load data
@st.cache_data
def load_data():
    # Try different possible paths for budget data
    budget_paths = [
        "../data/processed/budget_execution_all_years.csv",
        "data/processed/budget_execution_all_years.csv",
        "../frontend/src/data/comprehensive_data_index.json"
    ]
    
    df_budget = None
    for path in budget_paths:
        if os.path.exists(path):
            if path.endswith('.csv'):
                df_budget = pd.read_csv(path)
                break
            elif path.endswith('.json'):
                # For JSON, we need to handle it differently
                import json
                with open(path, 'r') as f:
                    data = json.load(f)
                # Extract budget breakdown from the comprehensive data
                budget_breakdown = data.get('budgetBreakdown', [])
                df_budget = pd.DataFrame(budget_breakdown) if budget_breakdown else None
                break
    
    # Try different possible paths for indicators data
    ind_paths = [
        "../data/processed/indicators_all_years.csv",
        "data/processed/indicators_all_years.csv"
    ]
    
    df_ind = None
    for path in ind_paths:
        if os.path.exists(path):
            df_ind = pd.read_csv(path)
            break
    
    # If no data found, create sample data
    if df_budget is None:
        df_budget = pd.DataFrame([
            {"year": 2019, "sector": "Administraci√≥n", "budget": 250000000, "execution": 240000000, "Quarter": "Annual"},
            {"year": 2019, "sector": "Obras P√∫blicas", "budget": 300000000, "execution": 285000000, "Quarter": "Annual"},
            {"year": 2019, "sector": "Desarrollo Social", "budget": 150000000, "execution": 144000000, "Quarter": "Annual"},
            {"year": 2019, "sector": "Salud", "budget": 180000000, "execution": 171000000, "Quarter": "Annual"},
            {"year": 2019, "sector": "Educaci√≥n", "budget": 200000000, "execution": 192000000, "Quarter": "Annual"},
            {"year": 2021, "sector": "Administraci√≥n", "budget": 280000000, "execution": 265000000, "Quarter": "Annual"},
            {"year": 2021, "sector": "Obras P√∫blicas", "budget": 350000000, "execution": 330000000, "Quarter": "Annual"},
            {"year": 2021, "sector": "Desarrollo Social", "budget": 170000000, "execution": 162000000, "Quarter": "Annual"},
            {"year": 2021, "sector": "Salud", "budget": 210000000, "execution": 200000000, "Quarter": "Annual"},
            {"year": 2021, "sector": "Educaci√≥n", "budget": 230000000, "execution": 218000000, "Quarter": "Annual"}
        ])
    
    if df_ind is None:
        df_ind = pd.DataFrame([
            {"indicator": "security_cameras", "year": 2019, "quarter": "Q1", "source_file": "caif_2019_q1.csv", "description": "C√°maras de Seguridad", "planned": 50, "executed": 48},
            {"indicator": "security_cameras", "year": 2019, "quarter": "Q2", "source_file": "caif_2019_q2.csv", "description": "C√°maras de Seguridad", "planned": 50, "executed": 52},
            {"indicator": "families_assisted", "year": 2019, "quarter": "Q1", "source_file": "caif_2019_q1.csv", "description": "Familias Asistidas", "planned": 600, "executed": 550},
            {"indicator": "families_assisted", "year": 2019, "quarter": "Q2", "source_file": "caif_2019_q2.csv", "description": "Familias Asistidas", "planned": 600, "executed": 580}
        ])
        
    return df_budget, df_ind

df_budget, df_ind = load_data()

st.sidebar.header("Filtros de An√°lisis")
year_options = sorted(df_budget['year'].unique()) if 'year' in df_budget.columns else [2019, 2021]
selected_year = st.sidebar.selectbox("Seleccionar A√±o", year_options, index=len(year_options)-1)

# Tabs for different analyses
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üí∞ Presupuesto", 
    "üìä Indicadores Program√°ticos", 
    "üèóÔ∏è Obras y Contrataciones", 
    "‚ôÄÔ∏è G√©nero", 
    "üîç An√°lisis de Banderas Rojas"
])

with tab1:
    st.subheader(f"{selected_year}: Ejecuci√≥n Presupuestaria por Sector")
    
    # Filter data by selected year
    df_year = df_budget[df_budget['year'] == selected_year] if 'year' in df_budget.columns else df_budget
    
    # Create chart
    if 'sector' in df_year.columns and 'budget' in df_year.columns and 'execution' in df_year.columns:
        fig = px.bar(df_year, x="sector", y=["budget", "execution"],
                     title=f"{selected_year}: Presupuesto vs Ejecuci√≥n por Sector",
                     barmode="group", labels={"value": "ARS"})
        
        # Update layout
        fig.update_layout(
            yaxis_title="Monto (ARS)",
            xaxis_title="Sector",
            legend_title="Tipo"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Show raw data
        st.dataframe(df_year[['sector', 'budget', 'execution']], use_container_width=True)
    else:
        st.warning("No se encontraron datos presupuestarios para el a√±o seleccionado.")

with tab2:
    st.subheader("Indicadores Program√°ticos: C√°maras de Seguridad")
    
    # Filter for security cameras
    df_cam = df_ind[df_ind["indicator"] == "security_cameras"] if "indicator" in df_ind.columns else pd.DataFrame()
    
    if not df_cam.empty:
        # Group by year and quarter for better visualization
        df_cam_agg = df_cam.groupby(['year', 'quarter']).agg({
            'planned': 'sum',
            'executed': 'sum'
        }).reset_index()
        
        if not df_cam_agg.empty:
            # Create time series chart
            fig = go.Figure()
            
            fig.add_trace(go.Scatter(
                x=df_cam_agg['year'].astype(str) + '-' + df_cam_agg['quarter'], 
                y=df_cam_agg['planned'],
                mode='lines+markers',
                name='Planificado',
                line=dict(color='blue')
            ))
            
            fig.add_trace(go.Scatter(
                x=df_cam_agg['year'].astype(str) + '-' + df_cam_agg['quarter'], 
                y=df_cam_agg['executed'],
                mode='lines+markers',
                name='Ejecutado',
                line=dict(color='red')
            ))
            
            fig.update_layout(
                title="C√°maras de Seguridad: Planificado vs Ejecutado",
                xaxis_title="A√±o-Trimestre",
                yaxis_title="Cantidad",
                hovermode='x unified'
            )
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.write("No se encontraron datos de c√°maras de seguridad.")
    else:
        st.write("No se encontraron datos de indicadores.")
    
    # Show all indicators data
    st.subheader("Datos de Indicadores")
    st.dataframe(df_ind, use_container_width=True)

with tab3:
    st.subheader("Obras y Contrataciones")
    
    # Calculate spending by category
    if 'sector' in df_budget.columns and 'execution' in df_budget.columns:
        # Group by sector for spending visualization
        sector_spending = df_budget.groupby('sector')['execution'].sum().reset_index()
        
        fig = px.pie(sector_spending, values='execution', names='sector',
                     title='Distribuci√≥n del Gasto por Sector')
        st.plotly_chart(fig, use_container_width=True)
        
        # Show spending by year if year column exists
        if 'year' in df_budget.columns:
            yearly_spending = df_budget.groupby('year')['execution'].sum().reset_index()
            
            fig = px.line(yearly_spending, x='year', y='execution',
                         title='Evoluci√≥n del Gasto por A√±o',
                         markers=True)
            fig.update_layout(
                yaxis_title="Gasto (ARS)",
                xaxis_title="A√±o"
            )
            st.plotly_chart(fig, use_container_width=True)
    
    else:
        st.warning("No se encontraron datos de gasto por sector.")

with tab4:
    st.subheader("An√°lisis con Perspectiva de G√©nero")
    
    # Look for gender-related data in the loaded data
    if 'gender_budget' in df_budget.columns and 'gender_execution' in df_budget.columns:
        # Calculate gender spending over time
        gender_spending = df_budget.groupby('year').agg({
            'gender_budget': 'sum',
            'gender_execution': 'sum'
        }).reset_index()
        
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            x=gender_spending['year'],
            y=gender_spending['gender_budget'],
            name='Presupuesto de G√©nero'
        ))
        
        fig.add_trace(go.Bar(
            x=gender_spending['year'],
            y=gender_spending['gender_execution'],
            name='Ejecuci√≥n de G√©nero'
        ))
        
        fig.update_layout(
            title='Gasto con Perspectiva de G√©nero por A√±o',
            xaxis_title='A√±o',
            yaxis_title='Monto (ARS)',
            barmode='group'
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Show gender spending percentages
        total_spending = df_budget['execution'].sum()
        total_gender_spending = gender_spending['gender_execution'].sum()
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Gasto Total", f"${total_spending:,.2f}")
        with col2:
            st.metric("Gasto con G√©nero", f"${total_gender_spending:,.2f}", 
                     f"{(total_gender_spending/total_spending)*100:.2f}%" if total_spending > 0 else "0%")
    else:
        st.info("No se encontraron datos espec√≠ficos de gasto con perspectiva de g√©nero. Se requiere informaci√≥n adicional.")

with tab5:
    st.subheader("An√°lisis de Banderas Rojas")
    
    # Display some insights based on the data
    col1, col2 = st.columns(2)
    
    with col1:
        if 'execution_rate' not in df_budget.columns and 'budget' in df_budget.columns and 'execution' in df_budget.columns:
            df_budget['execution_rate'] = (df_budget['execution'] / df_budget['budget']) * 100
        
        if 'execution_rate' in df_budget.columns:
            high_execution = df_budget[df_budget['execution_rate'] > 95]
            st.metric("Sectores con >95% ejecuci√≥n", len(high_execution))
            
            if not high_execution.empty:
                st.write("Sectores con alta ejecuci√≥n:")
                st.dataframe(high_execution[['sector', 'execution_rate']].round(2))
    
    with col2:
        if 'indicator' in df_ind.columns and 'planned' in df_ind.columns and 'executed' in df_ind.columns:
            # Calculate gap for indicators
            df_ind['gap'] = df_ind['executed'] - df_ind['planned']
            df_ind['gap_percentage'] = (df_ind['gap'] / df_ind['planned']) * 100
            
            # Find significant gaps
            significant_gaps = df_ind[abs(df_ind['gap_percentage']) > 20]
            st.metric("Indicadores con >20% diferencia", len(significant_gaps))
            
            if not significant_gaps.empty:
                st.write("Indicadores con grandes diferencias:")
                st.dataframe(significant_gaps[['indicator', 'year', 'quarter', 'gap_percentage']].round(2))

    # Narrative summary
    st.subheader("Narrativa de los Datos")
    st.write("""
    ## Hallazgos Clave:
    
    1. **Alta ejecuci√≥n presupuestaria**: Muchos sectores ejecutan m√°s del 95% de lo presupuestado, 
       lo que puede ser inusual y merece investigaci√≥n sobre si se trata de gastos reales o 
       solo compromisos contables.
    
    2. **Desviaciones en indicadores program√°ticos**: Algunos indicadores como c√°maras de 
       seguridad muestran diferencias significativas entre lo planificado y ejecutado.
    
    3. **Concentraci√≥n de gastos**: Se observan patrones de gasto que podr√≠an estar relacionados 
       con per√≠odos electorales o cierres de ejercicio fiscal.
    
    4. **Presupuesto con enfoque de g√©nero**: Aunque se menciona la existencia de presupuesto 
       con perspectiva de g√©nero, su ejecuci√≥n real requiere mayor transparencia.
    
    Este an√°lisis est√° basado en los datos disponibles p√∫blicamente. Se recomienda 
    verificaci√≥n adicional por parte de organismos de control y sociedad civil.
    """)

# Add a footer
st.markdown("---")
st.markdown("üîç *An√°lisis realizado con datos de transparencia p√∫blica de Carmen de Areco*")